package scripts;

import java.io.*;
import java.lang.String;
import java.util.*;

public class DemultiplexFASTA extends Script {
	public static String title = "Demultiplex FASTA";
	public static String b_desc = "Demultiplex fasta data according to barcode sequences or data supplied in fasta labels.";

	public DemultiplexFASTA() {
		// set up script name, command, and descriptions
		this.link = "http://qiime.org/scripts/demultiplex_fasta.html";
		this.c_name = SCRIPTS_PATH + "demultiplex_fasta.py";
		this.l_desc = "Using barcodes and/or data from fasta labels provided in a mapping file, will demultiplex sequences from an input fasta file. Barcodes will be removed from the sequences in the output fasta file by default. If a quality scores file is supplied, the quality score file will be truncated to match the output fasta file. The default barcode type are 12 base pair Golay codes. Alternative barcodes allowed are 8 base pair Hamming codes, variable_length, or generic barcodes of a specified length. Generic barcodes utilize mismatch counts for correction. One can also use an added demultiplex field (-j option) to specify data in the fasta labels that can be used alone or in conjunction with barcode sequences for demultiplexing. All barcode correction is disabled when variable length barcodes are used.";
		this.output_desc = "Four files can be generated by demultiplex_fasta.py<br><br>1. seqs.fna - This contains the fasta sequences, demultiplexed according to barcodes and/or added demultiplexed field.<br>2. demultiplexed_sequences.log - Contains details about demultiplexing stats<br>3. seqs.qual - If quality score file(s) are supplied, these will be truncated to match the seqs.fna file after barcode removal if such is enabled.<br>4. seqs_not_assigned.fna - If --retain_unassigned_reads is enabled, will write all sequences that can not be demultiplexed to this file. Also will create a seqs_not_assigned.qual file if quality file supplied.";

		// set up the required otpions
		this.r_options = new ArrayList<Option>(2);
		this.r_options.add(new Option("Mapping File", "-m", Option.PATH, "Name of mapping file. NOTE: Must contain a header line indicating SampleID in the first column and BarcodeSequence in the second, LinkerPrimerSequence in the third."));
		this.r_options.add(new Option("FASTA Names", "-f", Option.INPUT, "Name of mapping file. NOTE: Must contain a header line indicating SampleID in the first column and BarcodeSequence in the second, LinkerPrimerSequence in the third."));

		// set up the extra options
		this.e_options = new ArrayList<Option>(10);
		this.e_options.add(new Option("QUAL Files", "-q", Option.PATH, 0, "File paths of qual files, comma-delimited [default: None]"));
		this.e_options.add(new Option("Keep Barcode", "-B", Option.NOARG, "Do not remove barcode from sequences"));
		List<String> selects = new ArrayList<String>();
		selects.add("hamming_8");
		selects.add("golay_12");
		selects.add("variable_length");
		this.e_options.add(new Option("Barcode Type", "-b", Option.SELECT, selects, 1, "Barcode type, hamming_8, golay_12, variable_length (will disable any barcode correction if variable_length set), or a number representing the length of the barcode, such as -b 4. The max barcode errors (-e) should be lowered for short barcodes. [default: golay_12]"));
		this.e_options.add(new Option("Output", "-o", Option.PATH, "Directory prefix for output files [default: .]"));
		this.e_options.add(new Option("Max Barcode Errors", "-e", Option.NUM, "Maximum number of errors in barcode. If using generic barcodes every 0.5 specified counts as a primer mismatch. [default: 1.5]"));
		this.e_options.add(new Option("First Sequence", "-n", Option.NUM, "Seq id to use for the first sequence [default: 1]"));
		this.e_options.add(new Option("Retain Unassigned Reads", "--retain_unassigned_reads", Option.NOARG, "Retain sequences which can not be demultiplexed in a seperate output sequence file [default: False]"));
		this.e_options.add(new Option("Disable Barcode Correction", "-c", Option.NOARG, "Disable attempts to find nearest corrected barcode. Can improve performance. [default: False]"));
		this.e_options.add(new Option("Save Barcode Frequencies", "-F", Option.NOARG, "Save frequences of barcodes as they appear in the given sequences. Sorts in order of largest to smallest. Will do nothing if barcode type is 0 or variable_length. [default: False]"));
		this.e_options.add(new Option("Add Field", "-j", Option.INPUT, "Use -j to add a field to use in the mapping file as an additional demultiplexing option to the barcode. All combinations of barcodes and the values in these fields must be unique. The fields must contain values that can be parsed from the fasta labels such as “plate=R_2008_12_09”. In this case, “plate” would be the column header and “R_2008_12_09” would be the field data (minus quotes) in the mapping file. To use the run prefix from the fasta label, such as “>FLP3FBN01ELBSX”, where “FLP3FBN01” is generated from the run ID, use “-j run_prefix” and set the run prefix to be used as the data under the column headerr “run_prefix”. [default: None]"));
	
	}
}